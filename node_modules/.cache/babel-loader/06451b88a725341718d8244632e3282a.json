{"ast":null,"code":"'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer'); // Shorthands\n\n\nexports.parse = function parse(html, options) {\n  var parser = new Parser(options);\n  return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  var parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n  var serializer = new Serializer(node, options);\n  return serializer.serialize();\n}; // Tree adapters\n\n\nexports.treeAdapters = {\n  default: require('./tree_adapters/default'),\n  htmlparser2: require('./tree_adapters/htmlparser2')\n}; // Streaming\n\nexports.ParserStream = require('./parser/parser_stream');\nexports.PlainTextConversionStream = require('./parser/plain_text_conversion_stream');\nexports.SerializerStream = require('./serializer/serializer_stream');\nexports.SAXParser = require('./sax');","map":{"version":3,"sources":["D:/Office-Work/Panel/medx_panel/node_modules/react-render-html/node_modules/parse5/lib/index.js"],"names":["Parser","require","Serializer","exports","parse","html","options","parser","parseFragment","fragmentContext","serialize","node","serializer","treeAdapters","default","htmlparser2","ParserStream","PlainTextConversionStream","SerializerStream","SAXParser"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;AAAA,IACIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CADxB,C,CAIA;;;AACAE,OAAO,CAACC,KAAR,GAAgB,SAASA,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC1C,MAAIC,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAb;AAEA,SAAOC,MAAM,CAACH,KAAP,CAAaC,IAAb,CAAP;AACH,CAJD;;AAMAF,OAAO,CAACK,aAAR,GAAwB,SAASA,aAAT,CAAuBC,eAAvB,EAAwCJ,IAAxC,EAA8CC,OAA9C,EAAuD;AAC3E,MAAI,OAAOG,eAAP,KAA2B,QAA/B,EAAyC;AACrCH,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAGI,eAAP;AACAA,IAAAA,eAAe,GAAG,IAAlB;AACH;;AAED,MAAIF,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAb;AAEA,SAAOC,MAAM,CAACC,aAAP,CAAqBH,IAArB,EAA2BI,eAA3B,CAAP;AACH,CAVD;;AAYAN,OAAO,CAACO,SAAR,GAAoB,UAAUC,IAAV,EAAgBL,OAAhB,EAAyB;AACzC,MAAIM,UAAU,GAAG,IAAIV,UAAJ,CAAeS,IAAf,EAAqBL,OAArB,CAAjB;AAEA,SAAOM,UAAU,CAACF,SAAX,EAAP;AACH,CAJD,C,CAOA;;;AACAP,OAAO,CAACU,YAAR,GAAuB;AACnBC,EAAAA,OAAO,EAAEb,OAAO,CAAC,yBAAD,CADG;AAEnBc,EAAAA,WAAW,EAAEd,OAAO,CAAC,6BAAD;AAFD,CAAvB,C,CAMA;;AACAE,OAAO,CAACa,YAAR,GAAuBf,OAAO,CAAC,wBAAD,CAA9B;AACAE,OAAO,CAACc,yBAAR,GAAoChB,OAAO,CAAC,uCAAD,CAA3C;AACAE,OAAO,CAACe,gBAAR,GAA2BjB,OAAO,CAAC,gCAAD,CAAlC;AACAE,OAAO,CAACgB,SAAR,GAAoBlB,OAAO,CAAC,OAAD,CAA3B","sourcesContent":["'use strict';\r\n\r\nvar Parser = require('./parser'),\r\n    Serializer = require('./serializer');\r\n\r\n\r\n// Shorthands\r\nexports.parse = function parse(html, options) {\r\n    var parser = new Parser(options);\r\n\r\n    return parser.parse(html);\r\n};\r\n\r\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\r\n    if (typeof fragmentContext === 'string') {\r\n        options = html;\r\n        html = fragmentContext;\r\n        fragmentContext = null;\r\n    }\r\n\r\n    var parser = new Parser(options);\r\n\r\n    return parser.parseFragment(html, fragmentContext);\r\n};\r\n\r\nexports.serialize = function (node, options) {\r\n    var serializer = new Serializer(node, options);\r\n\r\n    return serializer.serialize();\r\n};\r\n\r\n\r\n// Tree adapters\r\nexports.treeAdapters = {\r\n    default: require('./tree_adapters/default'),\r\n    htmlparser2: require('./tree_adapters/htmlparser2')\r\n};\r\n\r\n\r\n// Streaming\r\nexports.ParserStream = require('./parser/parser_stream');\r\nexports.PlainTextConversionStream = require('./parser/plain_text_conversion_stream');\r\nexports.SerializerStream = require('./serializer/serializer_stream');\r\nexports.SAXParser = require('./sax');\r\n"]},"metadata":{},"sourceType":"script"}