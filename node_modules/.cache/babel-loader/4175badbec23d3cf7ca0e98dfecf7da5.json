{"ast":null,"code":"var _jsxFileName = \"D:\\\\Native\\\\Clone Projects\\\\medx_panel\\\\src\\\\component\\\\UploadEvents.js\";\nimport React, { Component } from 'react';\nimport { ServerurllogRegister, Serverurl } from '../Common/ServerUrl';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from 'react-loader-spinner';\nexport class UploadEvents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFileInput = event => {\n      console.log(event.target.files, 'file');\n      console.log(event.target.files[0], 'file 0');\n      let file_1 = event.target.files[0];\n      this.setState({\n        file: file_1,\n        errorText: \"\"\n      });\n\n      if (event.target.files) {\n        this.setState({\n          [event.target.name]: event.target.files[0],\n          file: URL.createObjectURL(event.target.files[0]),\n          ExcelFile: event.target.files[0]\n        });\n      }\n\n      console.log(\"File:\", event.target.files[0]);\n    };\n\n    this.handleFileInputImages = event => {\n      console.log(event.target.files, 'file');\n      console.log(event.target.files[0], 'file 0');\n      let file_2 = event.target.files[0];\n      this.setState({\n        file_zip: file_2,\n        errorText: \"\"\n      });\n\n      if (event.target.files) {\n        this.setState({\n          [event.target.name]: event.target.files[0],\n          file_zip: URL.createObjectURL(event.target.files[0]),\n          ExcelFile2: event.target.files[0]\n        });\n      }\n\n      console.log(\"File:\", event.target.files[0]);\n    };\n\n    this.state = {\n      file: \"\",\n      file_zip: \"\",\n      ExcelFile: \"\",\n      ExcelFile2: \"\",\n      loading: false,\n      loading_image: false\n    };\n  }\n\n  eventsImportImages(e) {// if (CheckSeen == true) {\n    //     validation = false;\n    //     this.setState({\n    //         errorText: \"*File must be of .csv format\"\n    //     })\n    // }\n  }\n\n  eventsImport(e) {\n    console.log(\"excel:\", this.state.ExcelFile);\n    console.log(\"excel:\", this.state.ExcelFile.name);\n    var Status = this.state.ExcelFile.name;\n    var CheckSeen = Status.includes('.csv');\n    console.log(\"Status:\", CheckSeen);\n    var validation = true;\n    console.log(\"excel:\", this.state.ExcelFile2);\n    console.log(\"excel:\", this.state.ExcelFile2.name);\n    var Status = this.state.ExcelFile2.name;\n    var CheckSeen = Status.includes('.csv');\n    console.log(\"Status:\", CheckSeen);\n    var validation = true;\n\n    if (validation == true) {\n      let formData = new FormData();\n      formData.append('file', this.state.ExcelFile2);\n      this.setState({\n        loading_image: true\n      }); // console.log('mydata', data)\n\n      var error = document.getElementById('err');\n      axios({\n        method: 'post',\n        url: Serverurl + 'event/image/bulkupload',\n        data: formData,\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        config: {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      }).then(res => {\n        console.log('res', res.data);\n\n        if (res.status === \"true\") {\n          swal(\"Poof! Your imaginary file has been deleted!\", {\n            icon: \"success\"\n          });\n          this.setState({\n            loading: false\n          });\n        } else {\n          swal(\"Event Images & CSV Uploaded Successfully!\");\n        } // setTimeout(() => {\n        //     window.location.href = \"/component/UploadEvents\"\n        // }, 3000)\n\n\n        console.log('data', res.data);\n      }).catch(err => {\n        console.log({\n          err\n        });\n        console.log(\"res\", err.response);\n        var error_message = err.response.data.error.messages;\n        console.log(\"error_excel\", error_message[0]);\n\n        if (err) {\n          this.setState({\n            loading: false\n          });\n          setTimeout(() => {\n            this.setState({\n              loading: false\n            });\n            this.setState(willSuccess => {\n              if (willSuccess) {\n                swal(error_message[0], {\n                  icon: \"warning\"\n                });\n              } else {\n                swal(\"Your imaginary file is safe!\");\n              }\n            });\n          }, 3000);\n        }\n      });\n    } // if (CheckSeen == true) {\n    //     validation = false;\n    //     this.setState({\n    //         errorText: \"*File must be of .csv format\"\n    //     })\n    // }\n\n\n    if (this.state.file == \"\") {\n      validation = false;\n      this.setState({\n        errorText: \"*File Import is required\"\n      });\n    }\n\n    if (validation == true) {\n      let formData = new FormData();\n      formData.append('file', this.state.ExcelFile);\n      this.setState({\n        loading: true\n      }); // console.log('mydata', data)\n\n      var error = document.getElementById('err');\n      axios({\n        method: 'post',\n        url: Serverurl + 'event/import',\n        data: formData,\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        config: {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      }).then(res => {\n        console.log('res', res.data);\n\n        if (res.status === \"true\") {\n          swal(\"Poof! Your imaginary file has been deleted!\", {\n            icon: \"success\"\n          });\n          this.setState({\n            loading: false\n          });\n        } else {\n          swal(\"Events Added Successfully!\");\n        }\n\n        setTimeout(() => {\n          window.location.href = \"/component/GridEvents\";\n        }, 3000);\n        console.log('data', res.data);\n      }).catch(err => {\n        console.log({\n          err\n        });\n        console.log(\"res\", err.response);\n        var error_message = err.response.data.error.messages;\n        console.log(\"error_excel\", error_message[0]);\n\n        if (err) {\n          this.setState({\n            loading: false\n          });\n          setTimeout(() => {\n            this.setState({\n              loading: false\n            });\n            this.setState(willSuccess => {\n              if (willSuccess) {\n                swal(error_message[0], {\n                  icon: \"warning\"\n                });\n              } else {\n                swal(\"Your imaginary file is safe!\");\n              }\n            });\n          }, 3000);\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-lg-11 col-md-12 card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"parent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"mt-0 header-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 33\n      }\n    }, \"Upload Events\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row input-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-sm-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 41\n      }\n    }, \"ZIP File\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-sm-10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      id: \"input-file-now\",\n      class: \"dropify\",\n      name: \"file\",\n      onChange: this.handleFileInputImages.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 45\n      }\n    }))), this.state.errorText ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 41\n      }\n    }, this.state.errorText) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row input-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-sm-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 41\n      }\n    }, \"CSV/Excel File\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-sm-10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      id: \"input-file-now\",\n      class: \"dropify\",\n      name: \"file\",\n      onChange: this.handleFileInput.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 45\n      }\n    }))), this.state.errorText ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 41\n      }\n    }, this.state.errorText) : null, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"button-align\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-danger waves-effect waves-light submit-button\",\n      onClick: this.eventsImport.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 45\n      }\n    }, this.state.loading == true ? /*#__PURE__*/React.createElement(Loader, {\n      type: \"Circles\",\n      color: \"#FFF\",\n      height: 20,\n      width: 20,\n      timeout: 8000,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 49\n      }\n    }) : \"Submit\")))))))));\n  }\n\n}\nexport default UploadEvents;","map":{"version":3,"sources":["D:/Native/Clone Projects/medx_panel/src/component/UploadEvents.js"],"names":["React","Component","ServerurllogRegister","Serverurl","axios","swal","Loader","UploadEvents","constructor","props","handleFileInput","event","console","log","target","files","file_1","setState","file","errorText","name","URL","createObjectURL","ExcelFile","handleFileInputImages","file_2","file_zip","ExcelFile2","state","loading","loading_image","eventsImportImages","e","eventsImport","Status","CheckSeen","includes","validation","formData","FormData","append","error","document","getElementById","method","url","data","headers","localStorage","getItem","config","then","res","status","icon","catch","err","response","error_message","messages","setTimeout","willSuccess","window","location","href","render","bind","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ServerurllogRegister, Serverurl } from '../Common/ServerUrl';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from 'react-loader-spinner'\r\n\r\nexport class UploadEvents extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file:\"\",\r\n            file_zip: \"\",\r\n            ExcelFile: \"\",\r\n            ExcelFile2: \"\",\r\n            loading: false,\r\n            loading_image: false\r\n        };\r\n    }\r\n\r\n\r\n\r\n    eventsImportImages(e) {\r\n\r\n        \r\n\r\n\r\n\r\n        // if (CheckSeen == true) {\r\n        //     validation = false;\r\n        //     this.setState({\r\n        //         errorText: \"*File must be of .csv format\"\r\n        //     })\r\n        // }\r\n\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    eventsImport(e) {\r\n\r\n        \r\n\r\n        console.log(\"excel:\", this.state.ExcelFile)\r\n\r\n        console.log(\"excel:\", this.state.ExcelFile.name)\r\n\r\n        var Status = this.state.ExcelFile.name;\r\n\r\n        var CheckSeen = Status.includes('.csv')\r\n\r\n        console.log(\"Status:\", CheckSeen)\r\n\r\n        var validation = true;\r\n\r\n        \r\n        console.log(\"excel:\", this.state.ExcelFile2)\r\n\r\n        console.log(\"excel:\", this.state.ExcelFile2.name)\r\n\r\n        var Status = this.state.ExcelFile2.name;\r\n\r\n        var CheckSeen = Status.includes('.csv')\r\n\r\n        console.log(\"Status:\", CheckSeen)\r\n\r\n        var validation = true;\r\n\r\n        if (validation == true) {\r\n\r\n            let formData = new FormData();\r\n            formData.append('file', this.state.ExcelFile2)\r\n\r\n\r\n\r\n            this.setState({\r\n                loading_image: true\r\n            })\r\n\r\n            // console.log('mydata', data)\r\n\r\n            var error = document.getElementById('err');\r\n            axios({\r\n                method: 'post',\r\n                url: Serverurl + 'event/image/bulkupload',\r\n                data: formData,\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                config: {\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                }\r\n            })\r\n                .then((res) => {\r\n                 \r\n                    console.log('res', res.data)\r\n                    if (res.status === \"true\") {\r\n                        swal(\"Poof! Your imaginary file has been deleted!\", {\r\n                            icon: \"success\",\r\n                        });\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                    } else {\r\n                        swal(\"Event Images & CSV Uploaded Successfully!\");\r\n                    }\r\n                    // setTimeout(() => {\r\n                    //     window.location.href = \"/component/UploadEvents\"\r\n                    // }, 3000)\r\n                    console.log('data', res.data)\r\n                })\r\n                .catch((err) => {\r\n                    console.log({ err })\r\n\r\n                    console.log(\"res\", err.response)\r\n\r\n                    var error_message = err.response.data.error.messages;\r\n\r\n                    console.log(\"error_excel\", error_message[0])\r\n\r\n                    if (err) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        setTimeout(() => {\r\n                            this.setState({\r\n                                loading: false\r\n                            })\r\n                            this.setState((willSuccess) => {\r\n                                if (willSuccess) {\r\n                                    swal(error_message[0], {\r\n                                        icon: \"warning\",\r\n                                    });\r\n                                } else {\r\n                                    swal(\"Your imaginary file is safe!\");\r\n                                }\r\n                            })\r\n                        }, 3000)\r\n                    }\r\n                })\r\n\r\n        }\r\n\r\n\r\n        // if (CheckSeen == true) {\r\n        //     validation = false;\r\n        //     this.setState({\r\n        //         errorText: \"*File must be of .csv format\"\r\n        //     })\r\n        // }\r\n\r\n\r\n        if (this.state.file == \"\") {\r\n            validation = false;\r\n            this.setState({\r\n                errorText: \"*File Import is required\"\r\n            })\r\n        }\r\n\r\n        \r\n\r\n\r\n        if (validation == true) {\r\n\r\n            let formData = new FormData();\r\n            formData.append('file', this.state.ExcelFile)\r\n\r\n\r\n\r\n            this.setState({\r\n                loading: true\r\n            })\r\n\r\n            // console.log('mydata', data)\r\n\r\n            var error = document.getElementById('err');\r\n            axios({\r\n                method: 'post',\r\n                url: Serverurl + 'event/import',\r\n                data: formData,\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                config: {\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                }\r\n            })\r\n                .then((res) => {\r\n                 \r\n                    console.log('res', res.data)\r\n                    if (res.status === \"true\") {\r\n                        swal(\"Poof! Your imaginary file has been deleted!\", {\r\n                            icon: \"success\",\r\n                        });\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                    } else {\r\n                        swal(\"Events Added Successfully!\");\r\n                    }\r\n                    setTimeout(() => {\r\n                        window.location.href = \"/component/GridEvents\"\r\n                    }, 3000)\r\n                    console.log('data', res.data)\r\n                })\r\n                .catch((err) => {\r\n                    console.log({ err })\r\n\r\n                    console.log(\"res\", err.response)\r\n\r\n                    var error_message = err.response.data.error.messages;\r\n\r\n                    console.log(\"error_excel\", error_message[0])\r\n\r\n                    if (err) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        setTimeout(() => {\r\n                            this.setState({\r\n                                loading: false\r\n                            })\r\n                            this.setState((willSuccess) => {\r\n                                if (willSuccess) {\r\n                                    swal(error_message[0], {\r\n                                        icon: \"warning\",\r\n                                    });\r\n                                } else {\r\n                                    swal(\"Your imaginary file is safe!\");\r\n                                }\r\n                            })\r\n                        }, 3000)\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    handleFileInput = (event) => {\r\n        console.log(event.target.files, 'file')\r\n        console.log(event.target.files[0], 'file 0')\r\n        let file_1 = event.target.files[0]\r\n        this.setState({\r\n            file: file_1,\r\n            errorText: \"\"\r\n        })\r\n        if (event.target.files) {\r\n            this.setState({\r\n                [event.target.name]: event.target.files[0],\r\n                file: URL.createObjectURL(event.target.files[0]),\r\n                ExcelFile: event.target.files[0]\r\n            })\r\n        }\r\n      \r\n        console.log(\"File:\", event.target.files[0])\r\n    }\r\n\r\n\r\n    handleFileInputImages = (event) => {\r\n        console.log(event.target.files, 'file')\r\n        console.log(event.target.files[0], 'file 0')\r\n        let file_2 = event.target.files[0]\r\n        this.setState({\r\n            file_zip: file_2,\r\n            errorText: \"\"\r\n        })\r\n        if (event.target.files) {\r\n            this.setState({\r\n                [event.target.name]: event.target.files[0],\r\n                file_zip: URL.createObjectURL(event.target.files[0]),\r\n                ExcelFile2: event.target.files[0]\r\n            })\r\n        }\r\n      \r\n        console.log(\"File:\", event.target.files[0])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <div class=\"container\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-11 col-md-12 card\">\r\n                            <div class=\"parent\">\r\n                                <h4 class=\"mt-0 header-title\">Upload Events</h4>\r\n                                <div className=\"form-padding\">\r\n                                    <div class=\"form-group row input-margin\">\r\n                                        <label class=\"col-sm-2 col-form-label\">ZIP File</label>\r\n                                        <div class=\"col-sm-10\">\r\n                                            <input type=\"file\" id=\"input-file-now\" class=\"dropify\" name=\"file\" onChange={this.handleFileInputImages.bind(this)} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {this.state.errorText ?\r\n                                        <p style={{ color: 'red' }}>{this.state.errorText}</p>\r\n                                        : null\r\n                                    }\r\n\r\n\r\n                                    {/* <div class=\"form-group row\">\r\n                                        <div class=\"button-align\">\r\n                                            <button type=\"button\" class=\"btn btn-danger waves-effect waves-light submit-button\" onClick={this.eventsImportImages.bind(this)}>\r\n                                                {this.state.loading_image == true ? \r\n                                                <Loader\r\n                                                type=\"Circles\"\r\n                                                color=\"#FFF\"\r\n                                                height={20}\r\n                                                width={20}\r\n                                                timeout={8000} \r\n                                        \r\n                                             />\r\n                                             :\r\n                                                \"Submit\"\r\n                                        }\r\n                                                </button>\r\n                                        </div>\r\n                                    </div> */}\r\n                                </div>\r\n\r\n                                <div className=\"form-padding\">\r\n                                    <div class=\"form-group row input-margin\">\r\n                                        <label class=\"col-sm-2 col-form-label\">CSV/Excel File</label>\r\n                                        <div class=\"col-sm-10\">\r\n                                            <input type=\"file\" id=\"input-file-now\" class=\"dropify\" name=\"file\" onChange={this.handleFileInput.bind(this)} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {this.state.errorText ?\r\n                                        <p style={{ color: 'red' }}>{this.state.errorText}</p>\r\n                                        : null\r\n                                    }\r\n\r\n\r\n                                    <div class=\"form-group row\">\r\n                                        <div class=\"button-align\">\r\n                                            <button type=\"button\" class=\"btn btn-danger waves-effect waves-light submit-button\" onClick={this.eventsImport.bind(this)}>\r\n                                                {this.state.loading == true ? \r\n                                                <Loader\r\n                                                type=\"Circles\"\r\n                                                color=\"#FFF\"\r\n                                                height={20}\r\n                                                width={20}\r\n                                                timeout={8000} \r\n                                        \r\n                                             />\r\n                                             :\r\n                                                \"Submit\"\r\n                                        }\r\n                                                </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UploadEvents\r\n"]},"metadata":{},"sourceType":"module"}